const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const fs = require('fs');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const BOT_TOKEN = '';


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const updateProgress = async (chatId, messageId, stage, progress) => {
  await bot.editMessageText(
    `–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: ${progress}%\n\n–≠—Ç–∞–ø: ${stage}`,
    { chat_id: chatId, message_id: messageId }
  );
};

// –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è exec –≤ –≤–∏–¥–µ –ø—Ä–æ–º–∏—Å–∞
const execPromise = (command) =>
  new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(new Error(stderr || error.message));
        return;
      }
      resolve(stdout.trim());
    });
  });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.');
});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const url = msg.text.trim();

  if (!url.startsWith('http')) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let currentMessage = await bot.sendMessage(chatId, '–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: 0%');

  const tempOutputPath = `downloads/temp_video_${Date.now()}.mp4`; // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const finalOutputPath = tempOutputPath.replace('temp_', '');     // –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
  const cookiesPath = 'config/cookies.txt'; // –ü—É—Ç—å –∫ cookies

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
  if (!fs.existsSync(cookiesPath)) {
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞: –§–∞–π–ª cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config/cookies.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
      { chat_id: chatId, message_id: currentMessage.message_id }
    );
    return;
  }

  try {
    // üî• –®–ê–ì 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    await updateProgress(chatId, currentMessage.message_id, '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ', 25);
    const downloadCommand = `yt-dlp --cookies ${cookiesPath} -f bestvideo+bestaudio --merge-output-format mp4 -o "${tempOutputPath}" "${url}"`;
    await execPromise(downloadCommand);

    // üî• –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∫–æ–¥–µ–∫–∞
    await updateProgress(chatId, currentMessage.message_id, '–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ', 40);
    const resolutionCommand = `ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0 "${tempOutputPath}"`;
    const resolution = await execPromise(resolutionCommand);
    const [width, height] = resolution.split(',');

    console.log(`–í–∏–¥–µ–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${width}x${height}`);

    const checkCodecCommand = `ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of csv=p=0 "${tempOutputPath}"`;
    const codec = await execPromise(checkCodecCommand);

    console.log(`–ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ: ${codec}`);

    // üî• –®–ê–ì 3: –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è Telegram
    await updateProgress(chatId, currentMessage.message_id, '–ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ', 60);

    const ffmpegCommand = `ffmpeg -i "${tempOutputPath}" -vf "scale=${width}:${height},setsar=1:1,format=yuv420p" \
      -c:v libx264 -profile:v baseline -level 3.0 -preset fast -crf 23 \
      -c:a aac -b:a 128k -ar 44100 -ac 2 -movflags +faststart \
      "${finalOutputPath}"`;

    await execPromise(ffmpegCommand);

    // üî• –®–ê–ì 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    await updateProgress(chatId, currentMessage.message_id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ', 75);
    await bot.sendVideo(chatId, finalOutputPath);
    await updateProgress(chatId, currentMessage.message_id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 100);
  } catch (error) {
    console.error(error.message);

    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.';

    if (error.message.includes('rate-limit')) {
      errorMessage = '–û—à–∏–±–∫–∞: Instagram –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø (rate-limit). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    } else if (error.message.includes('login required')) {
      errorMessage = '–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª cookies.txt.';
    } else if (error.message.includes('Unable to extract video url')) {
      errorMessage = '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.';
    } else {
      errorMessage += `\n\n–õ–æ–≥:\n${error.message}`;
    }

    await bot.editMessageText(errorMessage, {
      chat_id: chatId,
      message_id: currentMessage.message_id,
    });
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    if (fs.existsSync(tempOutputPath)) fs.unlinkSync(tempOutputPath);
    if (fs.existsSync(finalOutputPath)) fs.unlinkSync(finalOutputPath);
  }
});