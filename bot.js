require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { handleMessage } = require('./handlers/messageHandler');
const { pool, addUser, isAuthorized, getUserStats, getPlatformStats } = require('./handlers/database');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN || !process.env.DATABASE_URL) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏–ª–∏ DATABASE_URL –≤ .env");
    process.exit(1);
}

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function checkDatabase() {
    try {
        const res = await pool.query('SELECT NOW()');
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${res.rows[0].now}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", error);
        process.exit(1);
    }
}

(async () => {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...");
    await checkDatabase();
    console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
})();

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showUserStats(bot, msg) {
    const chatId = msg.chat.id;
    const name = msg.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const userStats = await getUserStats(chatId);
        const platformStats = await getPlatformStats(chatId);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        let lastDownloadDate = '–ù–µ—Ç –∑–∞–≥—Ä—É–∑–æ–∫';
        if (userStats.last_download) {
            const date = new Date(userStats.last_download);
            lastDownloadDate = date.toLocaleDateString('ru-RU', {
                day: '2-digit', 
                month: '2-digit', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        let platformsText = '';
        if (platformStats && platformStats.length > 0) {
            platformsText = platformStats.map(p => 
                `‚Ä¢ ${p.platform}: ${p.successful}/${p.downloads} (${Math.round(p.successful/p.downloads*100)}%)`
            ).join('\n');
        } else {
            platformsText = '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        }

        // –û–±—â–∏–π –æ–±—ä–µ–º –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const totalSizeFormatted = userStats.total_size > 0 
            ? `${parseFloat(userStats.total_size).toFixed(2)} MB` 
            : '0 MB';
        
        const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${name}:

üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${userStats.successful_downloads}/${userStats.total_downloads}
üì¶ –û–±—â–∏–π –æ–±—ä–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: ${totalSizeFormatted}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: ${lastDownloadDate}

üì± –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:
${platformsText}
        `;
        
        bot.sendMessage(chatId, statsMessage);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const name = msg.from.first_name || "Unknown";
    const text = msg.text || "";

    await addUser(chatId, name);

    const authorized = await isAuthorized(chatId);
    if (!authorized) {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await showUserStats(bot, msg);
        return;
    } else if (text === '‚ùì –ü–æ–º–æ—â—å') {
        const helpMessage = `
üêÄ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram
2Ô∏è‚É£ –Ø —Å–∫–∞—á–∞—é –µ–≥–æ –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ
3Ô∏è‚É£ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Instagram
        `;
        bot.sendMessage(chatId, helpMessage);
        return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
    await handleMessage(bot, msg);
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const name = msg.from.first_name || "–¥—Ä—É–≥";

    const greetingMessage = `
üêÄ –ü—Ä–∏–≤–µ—Ç, ${name}! üêÄ
–Ø ‚Äì —à—É—Å—Ç—Ä–∞—è –≤–∏–¥–µ–æ–º—ã—à—å! üé•
–°–±–µ–≥–∞—é –≤ —Å–æ—Ü—Å–µ—Ç–∏ –∏ —É—Ç–∞—â—É –¥–ª—è —Ç–µ–±—è –Ω—É–∂–Ω–æ–µ –≤–∏–¥–µ–æ. –ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É!

üìå –ì–¥–µ –º–æ–≥—É –ø–æ—Ä—ã—Ç—å—Å—è:

‚úÖ Instagram
üö´ TikTok
üö´ YouTube
üö´ Twitter (X)
üö´ Facebook

‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –Ω–æ—Ä–∫–µ –≤—ã–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äì –∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const mainMenu = {
        reply_markup: {
            keyboard: [
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
                [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
            ],
            resize_keyboard: true,
            persistent: true
        }
    };
    
    bot.sendMessage(chatId, greetingMessage, mainMenu);
});

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–∫–∂–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.onText(/\/stats/, async (msg) => {
    await showUserStats(bot, msg);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"
    if (data.startsWith('retry_')) {
        const url = data.substring(6); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ callback_data
        
        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        await bot.answerCallbackQuery(query.id, {
            text: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...'
        });
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ handleMessage
        const fakeMsg = {
            chat: { id: chatId },
            text: url,
            message_id: query.message.message_id
        };
        
        // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞, –º—ã –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
        // —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤–Ω—É—Ç—Ä–∏ handleMessage
        await handleMessage(bot, fakeMsg);
    }
});