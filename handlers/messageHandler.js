const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const { detectPlatform, logTask, updateTaskStatus, updateDownloadSize, updateFinalSize } = require('./database');

async function handleMessage(bot, msg) {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const text = msg.text.trim();

    if (text.startsWith('/')) {
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä /start
    }

    if (!text.startsWith('http')) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.');
        return;
    }

    const platform = detectPlatform(text);
    if (platform === 'unknown') {
        bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Ü—Å–µ—Ç—å.');
        return;
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—Å—ã–ª–∫–æ–π
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö)
    }

    const taskId = await logTask(chatId, text, platform);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É
    const initialMessage = `üîó <b>–°—Å—ã–ª–∫–∞:</b> ${text}\n\nüîÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...</b>`;
    let progressMessage = await bot.sendMessage(chatId, initialMessage, {parse_mode: 'HTML'});

    const startTime = Date.now();
    const tempOutputPath = `downloads/temp_video_${Date.now()}.mp4`;
    const finalOutputPath = tempOutputPath.replace('temp_', '');

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    const downloadsDir = path.dirname(tempOutputPath);
    if (!fs.existsSync(downloadsDir)) {
        fs.mkdirSync(downloadsDir, { recursive: true });
    }

    try {
        await updateProgress(bot, chatId, progressMessage.message_id, 'üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ', 25, platform, text);

        const downloadCommand = `yt-dlp -f bestvideo+bestaudio --merge-output-format mp4 -o "${tempOutputPath}" "${text}"`;
        await execPromise(downloadCommand);

        const downloadSize = getFileSize(tempOutputPath);
        await updateDownloadSize(taskId, downloadSize); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        await updateProgress(bot, chatId, progressMessage.message_id, 'üéû –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞', 60, platform, text);

        const ffmpegCommand = `ffmpeg -i "${tempOutputPath}" -c:v libx264 -preset fast -crf 23 -c:a aac -b:a 128k "${finalOutputPath}"`;
        await execPromise(ffmpegCommand);

        const finalSize = getFileSize(finalOutputPath);
        await updateFinalSize(taskId, finalSize); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        await updateProgress(bot, chatId, progressMessage.message_id, 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ', 90, platform, text);

        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const endTime = Date.now();
        const duration = ((endTime - startTime) / 1000).toFixed(1); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const successCaption = `
üé• <b>–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>
üîó <a href="${text}">–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>
‚è± –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${duration} —Å–µ–∫.
üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${finalSize} MB
üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}
        `;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot.sendVideo(chatId, finalOutputPath, {
            caption: successCaption,
            parse_mode: 'HTML'
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
        await bot.deleteMessage(chatId, progressMessage.message_id);

        await updateTaskStatus(taskId, 'success');

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const retryButton = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', callback_data: `retry_${text}` }]
                ]
            }
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ –∏ –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
        await bot.editMessageText(`‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ</b>\n\nüîó <a href="${text}">–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>\n\n${error.message}`, {
            chat_id: chatId,
            message_id: progressMessage.message_id,
            parse_mode: 'HTML',
            ...retryButton
        });
        
        await updateTaskStatus(taskId, 'failed');
    } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (fs.existsSync(tempOutputPath)) fs.unlinkSync(tempOutputPath);
        if (fs.existsSync(finalOutputPath)) fs.unlinkSync(finalOutputPath);
    }
}

async function updateProgress(bot, chatId, messageId, stage, progress, platform, url) {
    let statusMessage = `üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="${url}">${url}</a>\n\n`;
    statusMessage += `üîÑ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${platform}\n`;
    statusMessage += `üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> ${progress}%\n`;
    statusMessage += `${stage}`;
    
    await bot.editMessageText(statusMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
    });
}

function getFileSize(filePath) {
    try {
        const stats = fs.statSync(filePath);
        return (stats.size / (1024 * 1024)).toFixed(2);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:", error.message);
        return null;
    }
}

function execPromise(command) {
    return new Promise((resolve, reject) => {
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(new Error(stderr || error.message));
                return;
            }
            resolve(stdout.trim());
        });
    });
}

module.exports = { handleMessage };